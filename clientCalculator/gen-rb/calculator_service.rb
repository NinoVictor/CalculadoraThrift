#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'calculator_types'

module CalculatorService
  class Client
    include ::Thrift::Client

    def Sum(firstNumber, secondNumber)
      send_Sum(firstNumber, secondNumber)
      return recv_Sum()
    end

    def send_Sum(firstNumber, secondNumber)
      send_message('Sum', Sum_args, :firstNumber => firstNumber, :secondNumber => secondNumber)
    end

    def recv_Sum()
      result = receive_message(Sum_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Sum failed: unknown result')
    end

    def Subtraction(firstNumber, secondNumber)
      send_Subtraction(firstNumber, secondNumber)
      return recv_Subtraction()
    end

    def send_Subtraction(firstNumber, secondNumber)
      send_message('Subtraction', Subtraction_args, :firstNumber => firstNumber, :secondNumber => secondNumber)
    end

    def recv_Subtraction()
      result = receive_message(Subtraction_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Subtraction failed: unknown result')
    end

    def Division(firstNumber, secondNumber)
      send_Division(firstNumber, secondNumber)
      return recv_Division()
    end

    def send_Division(firstNumber, secondNumber)
      send_message('Division', Division_args, :firstNumber => firstNumber, :secondNumber => secondNumber)
    end

    def recv_Division()
      result = receive_message(Division_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Division failed: unknown result')
    end

    def Multiplication(firstNumber, secondNumber)
      send_Multiplication(firstNumber, secondNumber)
      return recv_Multiplication()
    end

    def send_Multiplication(firstNumber, secondNumber)
      send_message('Multiplication', Multiplication_args, :firstNumber => firstNumber, :secondNumber => secondNumber)
    end

    def recv_Multiplication()
      result = receive_message(Multiplication_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Multiplication failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_Sum(seqid, iprot, oprot)
      args = read_args(iprot, Sum_args)
      result = Sum_result.new()
      result.success = @handler.Sum(args.firstNumber, args.secondNumber)
      write_result(result, oprot, 'Sum', seqid)
    end

    def process_Subtraction(seqid, iprot, oprot)
      args = read_args(iprot, Subtraction_args)
      result = Subtraction_result.new()
      result.success = @handler.Subtraction(args.firstNumber, args.secondNumber)
      write_result(result, oprot, 'Subtraction', seqid)
    end

    def process_Division(seqid, iprot, oprot)
      args = read_args(iprot, Division_args)
      result = Division_result.new()
      result.success = @handler.Division(args.firstNumber, args.secondNumber)
      write_result(result, oprot, 'Division', seqid)
    end

    def process_Multiplication(seqid, iprot, oprot)
      args = read_args(iprot, Multiplication_args)
      result = Multiplication_result.new()
      result.success = @handler.Multiplication(args.firstNumber, args.secondNumber)
      write_result(result, oprot, 'Multiplication', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Sum_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FIRSTNUMBER = 1
    SECONDNUMBER = 2

    FIELDS = {
      FIRSTNUMBER => {:type => ::Thrift::Types::DOUBLE, :name => 'firstNumber'},
      SECONDNUMBER => {:type => ::Thrift::Types::DOUBLE, :name => 'secondNumber'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sum_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::OperationResult}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Subtraction_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FIRSTNUMBER = 1
    SECONDNUMBER = 2

    FIELDS = {
      FIRSTNUMBER => {:type => ::Thrift::Types::DOUBLE, :name => 'firstNumber'},
      SECONDNUMBER => {:type => ::Thrift::Types::DOUBLE, :name => 'secondNumber'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Subtraction_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::OperationResult}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FIRSTNUMBER = 1
    SECONDNUMBER = 2

    FIELDS = {
      FIRSTNUMBER => {:type => ::Thrift::Types::DOUBLE, :name => 'firstNumber'},
      SECONDNUMBER => {:type => ::Thrift::Types::DOUBLE, :name => 'secondNumber'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::OperationResult}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplication_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FIRSTNUMBER = 1
    SECONDNUMBER = 2

    FIELDS = {
      FIRSTNUMBER => {:type => ::Thrift::Types::DOUBLE, :name => 'firstNumber'},
      SECONDNUMBER => {:type => ::Thrift::Types::DOUBLE, :name => 'secondNumber'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplication_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::OperationResult}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

